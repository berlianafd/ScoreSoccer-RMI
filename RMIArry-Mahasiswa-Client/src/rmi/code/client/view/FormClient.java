package rmi.code.client.view;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import rmi.code.client.table.TableModelScore;
import rmi.code.client.table.TableModelScore1;
import rmi.code.client.table.TableModelScoreAll;
import rmi.soccerscore.code.entity.soccerScore;
import rmi.soccerscore.code.service.soccerScoreService;

//Class Jframe Client
public class FormClient extends javax.swing.JFrame {

    //Membuat objek dari class 'TableModelMahasiswa' untuk menampilkan data pada Table
    private TableModelScore tableModelScore = new TableModelScore();
    private TableModelScore1 tableModelScore1 = new TableModelScore1();
    private TableModelScoreAll tableModelScoreAll = new TableModelScoreAll();

    //Membuat objek dari class 'MahasiswaService' untuk memproses permintaan
    private soccerScoreService service;

    public FormClient(soccerScoreService service) {
        this.service = service;

        //Mengambil seluruh data yang ada pada database, dan menyimpan ke objek tableModelMahasiswa
        try {
            tableModelScore.setData(service.getAllScore());
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        initComponents();

        //Menampilkan dan menata data yang telah didapat dari objek 'tableModelMahasiswa'
        //ke dalam 'tableMahasiswa' di JFrame Client 
        tableScore.setModel(tableModelScore);
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tableScore.getModel());
        tableScore.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();

        int columnIndexToPoints = 8;
        sortKeys.add(new RowSorter.SortKey(columnIndexToPoints, SortOrder.DESCENDING));
        int columnIndexToGD = 7;
        sortKeys.add(new RowSorter.SortKey(columnIndexToGD, SortOrder.DESCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();
        tableScore.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int row = tableScore.getSelectedRow();
                if (row != -1) {
                    soccerScore score = tableModelScore.get(row);
                    txtnameTeamA.setSelectedItem(score.getTeamName());
                }
            }
        });

    }

    private FormClient() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableScore = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        buttonInsert = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        txtScoreA = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtScoreB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtnameTeamA = new javax.swing.JComboBox<>();
        txtnameTeamB = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableScore.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableScore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableScoreMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableScore);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("TeamA");

        buttonInsert.setText("Insert");
        buttonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInsertActionPerformed(evt);
            }
        });

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        txtScoreA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtScoreAActionPerformed(evt);
            }
        });
        txtScoreA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtScoreAKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel6.setText("SCORE SOCCER");

        txtScoreB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtScoreBKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("TeamB");

        txtnameTeamA.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arema", "Bali United", "Madura United", "Mitra Kukar", "Persebaya", "Persela", "Persib", "Persija", "Persipura", "PSIS", "PSM", "PSMS", "Sriwijaya" }));
        txtnameTeamA.setSelectedIndex(-1);
        txtnameTeamA.setToolTipText("");
        txtnameTeamA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnameTeamAActionPerformed(evt);
            }
        });

        txtnameTeamB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arema", "Bali United", "Madura United", "Mitra Kukar", "Persebaya", "Persela", "Persib", "Persija", "Persipura", "PSIS", "PSM", "PSMS", "Sriwijaya" }));
        txtnameTeamB.setSelectedIndex(-1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(152, 152, 152))
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtnameTeamA, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtScoreA, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                .addGap(157, 157, 157)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(buttonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtnameTeamB, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtScoreB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(228, 228, 228))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(288, 288, 288))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtnameTeamA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtnameTeamB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtScoreA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtScoreB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonInsert)
                    .addComponent(buttonRefresh))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Prosedur ketika tombol insert ditekan
    private void buttonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInsertActionPerformed
        try {
            String timA = (String) txtnameTeamA.getSelectedItem();
            String timB = (String) txtnameTeamB.getSelectedItem();

            tableModelScore.setData(service.getScore(timA));
            tableModelScore1.setData(service.getScore(timB));

            soccerScore score = new soccerScore();
            soccerScore scoretimB = new soccerScore();

            //Menyimpan record data dari client ke tiap tiap entitas
            score.setTeamName(timA);
            scoretimB.setTeamName(timB);

            Object P = tableModelScore.getValueAt(0, 1);
            Object PtimB = tableModelScore1.getValueAt(0, 1);
            int totalP = (int) P + 1;
            int totalPtimB = (int) PtimB + 1;
            score.setP(totalP);
            scoretimB.setP(totalPtimB);

            if (Integer.parseInt(txtScoreA.getText()) > Integer.parseInt(txtScoreB.getText())) {
                score.setW((int) tableModelScore.getValueAt(0, 2) + 1);
                score.setD((int) tableModelScore.getValueAt(0, 3));
                score.setL((int) tableModelScore.getValueAt(0, 4));
                scoretimB.setW((int) tableModelScore1.getValueAt(0, 2));
                scoretimB.setD((int) tableModelScore1.getValueAt(0, 3));
                scoretimB.setL((int) tableModelScore1.getValueAt(0, 4) + 1);
            } else if (Integer.parseInt(txtScoreA.getText()) == Integer.parseInt(txtScoreB.getText())) {
                score.setW((int) tableModelScore.getValueAt(0, 2));
                score.setD((int) tableModelScore.getValueAt(0, 3) + 1);
                score.setL((int) tableModelScore.getValueAt(0, 4));
                scoretimB.setW((int) tableModelScore1.getValueAt(0, 2));
                scoretimB.setD((int) tableModelScore1.getValueAt(0, 3) + 1);
                scoretimB.setL((int) tableModelScore1.getValueAt(0, 4));
            } else {
                score.setW((int) tableModelScore.getValueAt(0, 2));
                score.setD((int) tableModelScore.getValueAt(0, 3));
                score.setL((int) tableModelScore.getValueAt(0, 4) + 1);
                scoretimB.setW((int) tableModelScore1.getValueAt(0, 2) + 1);
                scoretimB.setD((int) tableModelScore1.getValueAt(0, 3));
                scoretimB.setL((int) tableModelScore1.getValueAt(0, 4));
            }

            score.setF((int) tableModelScore.getValueAt(0, 5) + Integer.parseInt(txtScoreA.getText()));
            score.setA((int) tableModelScore.getValueAt(0, 6) + Integer.parseInt(txtScoreB.getText()));
            score.setGD(score.getF() - score.getA());
            score.setPTS(3 * score.getW() + score.getD());
            scoretimB.setF((int) tableModelScore1.getValueAt(0, 5) + Integer.parseInt(txtScoreB.getText()));
            scoretimB.setA((int) tableModelScore1.getValueAt(0, 6) + Integer.parseInt(txtScoreA.getText()));
            scoretimB.setGD( scoretimB.getF()- scoretimB.getA());
            scoretimB.setPTS(3 * scoretimB.getW() + scoretimB.getD());

            List<soccerScore> list = service.getAllScore();
            tableModelScoreAll.setData(list);
            
            for (int i = 0; i < tableModelScoreAll.getRowCount(); i++) {
                for (int j = 0; j < tableModelScoreAll.getRowCount(); j++) {
                    String namaTim = (String) tableModelScoreAll.getValueAt(i, 0);
                    String namaTimm = (String) tableModelScoreAll.getValueAt(j, 0);
                    if (timA.equals(namaTim) && timB.equals(namaTimm)) {
                        service.updateScore(score);
                        service.updateScore(scoretimB);
                    }
                }

            }

            //menampilkan feedback yang diberikan oleh server
//            JOptionPane.showMessageDialog(null, score1.getStatusOps());
//            JOptionPane.showMessageDialog(null, score2.getStatusOps());
            refreshInsert(); //merefresh table

        } catch (RemoteException ex) {
            ex.printStackTrace();   //feedback ketika tidak bisa menghubungi server
        }
    }//GEN-LAST:event_buttonInsertActionPerformed

    //Prosedur tombol REFRESH
    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        //Memanggil prosedur Refresh
        refreshInsert();
        //Menampilkan feedback
        JOptionPane.showMessageDialog(null, "Refresh..");
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void tableScoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableScoreMouseClicked

    }//GEN-LAST:event_tableScoreMouseClicked

    private void txtScoreAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtScoreAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtScoreAActionPerformed

    private void txtScoreAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtScoreAKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtScoreAKeyTyped

    private void txtScoreBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtScoreBKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txtScoreBKeyTyped

    private void txtnameTeamAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnameTeamAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnameTeamAActionPerformed

    /**
     * @param args the command line arguments
     */
    //prosedur untuk merefresh table pada JFrame Client
    public void refresh() {
        txtnameTeamA.setSelectedIndex(-1);
        txtnameTeamB.setSelectedIndex(-1);
        txtScoreA.setText("");
        txtScoreB.setText("");

        try {
            int row = tableScore.getSelectedRow();
            if (row == -1) {
                return;
            }
            List<soccerScore> list = service.getAllScore();
            tableModelScore.setData(list);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void refreshInsert() {
        txtnameTeamA.setSelectedIndex(-1);
        txtnameTeamB.setSelectedIndex(-1);
        txtScoreA.setText("");
        txtScoreB.setText("");

        try {
            List<soccerScore> list = service.getAllScore();
            tableModelScore.setData(list);
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonInsert;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableScore;
    private javax.swing.JTextField txtScoreA;
    private javax.swing.JTextField txtScoreB;
    private javax.swing.JComboBox<String> txtnameTeamA;
    private javax.swing.JComboBox<String> txtnameTeamB;
    // End of variables declaration//GEN-END:variables
}
